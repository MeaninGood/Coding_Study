# 1718번_암호

## 평문 - 암호화 키 -> 암호
## 암호화 키가 love이고, 암호화할 문장이 "nice day"라면
## lovelove (암호화키)
## nice day (평문)
## btgz oet (암호문)
## a보다 이전이면 z로 돌아감
## 평문의 문자가 공백인 경우 그 공백 문자를 그대로 출력


'''
# 첫째 줄에 평문, 둘째 줄에 암호화 키 주어짐
# 평문은 알파벳 소문자와 공백문자로만 구성, 암호화 키는 알파벳 소문자만 구성
## 첫 번째 줄에 암호문을 출력

(입력)
nice day
love


(출력)
btgz oet

'''

# 값 자체를 전부 다 ord로 받을 수 있나 고려해볼 것
# 리스트 전체를 다 chr로 변환할 수 있나 고려해볼 것


s = input().lower()
vc = input().lower()

arr = [0] * len(s) # 암호화 키를 평문과 같은 길이로 늘려줄 리스트 생성

for i in range(len(s)) : # s의 길이만큼
    arr[i] = vc[i%len(vc)] # 암호화키[i] 자리에 입력받은 암호화키%len(vc)를 넣어줌
    # 예를들어 love 에서 vc[0] = l, vc[1] = o, vc[2] = v, vc[3] = e일 때
    # 4 % 4로 넣으면 [0], [1], [2], [3], [0], [1], [2], [3] 순으로 돌아가며 계속해서 채워진다


result = '' # 암호문 입력해줄 빈 문자열 생성
  
for j in range(len(s)) :
    if s[j] == ' ' : # 만약 평문의[j]가 공백이면
        result += ' ' # 그대로 공백 추가
        
    else : # 이외에는
        result += chr((ord(s[j]) - ord(arr[j] ) -1 )%26 + ord('a'))
        #s[j]에서 arr[j] - 1 을 해줌
        # 이 값을 26(알파벳 소문자 26자리를 순환함)으로 나누고
        # 나눈 값에 다시 ord('a')추가
        
        # 예를들어 l과 n을 비교한다고 했을때,
        # ord('n') = 110, ord('b') = 108 // 이렇게 두 개를 빼주면 2가 남는데
        # 1을 더 빼주는 이유는 ord('a')가 1에서 시작한다고 보면 되기 때문
        # 이걸 0으로 맞춰주는 작업
        # 그래야 %26을 하면 ord('a') = 0이 되고, 여기다 ord('a')를 더하면 97이 되어
        # a가 출력됨
    
print(result)